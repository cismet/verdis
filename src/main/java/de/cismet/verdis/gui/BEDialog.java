/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.cismet.verdis.gui;

import java.awt.Component;
import java.awt.Frame;

import java.sql.Date;

import java.util.List;

import de.cismet.cids.dynamics.CidsBean;
import de.cismet.cids.dynamics.CidsBeanStore;

import de.cismet.validation.*;

import de.cismet.validation.display.EmbeddedValidatorDisplay;

import de.cismet.validation.validator.AggregatedValidator;
import de.cismet.validation.validator.BindingValidator;
import de.cismet.validation.validator.CidsBeanValidator;

/**
 * DOCUMENT ME!
 *
 * @author   jruiz
 * @version  $Revision$, $Date$
 */
public class BEDialog extends javax.swing.JDialog implements CidsBeanStore {

    //~ Instance fields --------------------------------------------------------

    private CidsBean cidsBean;
    private final List<CidsBean> cidsBeanList;
    private final String backupAktenzeichen;
    private final Date backupGueltigBis;
    private boolean go = false;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnGo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField txtAktenzeichen;
    private javax.swing.JTextField txtGueltigBis;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates a new BEDialog object.
     *
     * @param  owner   DOCUMENT ME!
     * @param  beBean  DOCUMENT ME!
     */
    public BEDialog(final Frame owner, final CidsBean beBean) {
        this(owner, beBean, null);
    }

    /**
     * Creates a new BEDialog object.
     *
     * @param  owner     DOCUMENT ME!
     * @param  cidsBean  DOCUMENT ME!
     * @param  cidsList  DOCUMENT ME!
     */
    public BEDialog(final Frame owner, final CidsBean cidsBean, final List<CidsBean> cidsList) {
        super(owner);

        this.cidsBeanList = cidsList;

        if (cidsBean != null) {
            backupAktenzeichen = (String)cidsBean.getProperty("aktenzeichen");
            backupGueltigBis = (Date)cidsBean.getProperty("gueltig_bis");
        } else {
            backupAktenzeichen = null;
            backupGueltigBis = null;
        }

        initComponents();
        getRootPane().setDefaultButton(btnGo);

        setCidsBean(cidsBean);
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * DOCUMENT ME!
     */
    private void initValidators() {
        ValidatorHelper.removeAllNoBindingValidatorFromDisplay(txtAktenzeichen);
        ValidatorHelper.removeAllNoBindingValidatorFromDisplay(txtGueltigBis);

        final Validator aktenzeichenBindingValidator = new BindingValidator(bindingGroup.getBinding("aktenzeichen"));
        final Validator aktenzeichenBeanValidator = createValidatorAktenzeichen(cidsBean);

        aktenzeichenBindingValidator.attachDisplay(EmbeddedValidatorDisplay.getEmbeddedDisplayFor(txtAktenzeichen));
        aktenzeichenBeanValidator.attachDisplay(EmbeddedValidatorDisplay.getEmbeddedDisplayFor(txtAktenzeichen));

        final Validator gueltigBisBindingValidator = new BindingValidator(bindingGroup.getBinding("gueltig_bis"));
        final Validator gueltigBisBeanValidator = createValidatorGueltigbis(cidsBean);

        gueltigBisBindingValidator.attachDisplay(EmbeddedValidatorDisplay.getEmbeddedDisplayFor(txtGueltigBis));
        gueltigBisBeanValidator.attachDisplay(EmbeddedValidatorDisplay.getEmbeddedDisplayFor(txtGueltigBis));

        final AggregatedValidator aggVal = new AggregatedValidator();
        aggVal.add(aktenzeichenBindingValidator);
        aggVal.add(aktenzeichenBeanValidator);
        aggVal.add(gueltigBisBindingValidator);
        aggVal.add(gueltigBisBeanValidator);
        aggVal.addListener(new ValidatorListener() {

                @Override
                public void stateChanged(final Validator source, final ValidatorState state) {
                    btnGo.setEnabled(state.isValid());
                }
            });
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtAktenzeichen = new javax.swing.JTextField();
        txtGueltigBis = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        btnCancel = new javax.swing.JButton();
        btnGo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(BEDialog.class, "BEDialog.title")); // NOI18N
        setModal(true);
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText(org.openide.util.NbBundle.getMessage(BEDialog.class, "BEDialog.jLabel1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jLabel1, gridBagConstraints);

        jLabel2.setText(org.openide.util.NbBundle.getMessage(BEDialog.class, "BEDialog.jLabel2.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jLabel2, gridBagConstraints);

        txtAktenzeichen.setMinimumSize(new java.awt.Dimension(100, 28));
        txtAktenzeichen.setPreferredSize(new java.awt.Dimension(100, 28));

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(
                org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                this,
                org.jdesktop.beansbinding.ELProperty.create("${cidsBean.aktenzeichen}"),
                txtAktenzeichen,
                org.jdesktop.beansbinding.BeanProperty.create("text"),
                "aktenzeichen");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(txtAktenzeichen, gridBagConstraints);

        txtGueltigBis.setMinimumSize(new java.awt.Dimension(100, 28));
        txtGueltigBis.setPreferredSize(new java.awt.Dimension(100, 28));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(
                org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                this,
                org.jdesktop.beansbinding.ELProperty.create("${cidsBean.gueltig_bis}"),
                txtGueltigBis,
                org.jdesktop.beansbinding.BeanProperty.create("text"),
                "gueltig_bis");
        binding.setConverter(new DateToStringConverter());
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(txtGueltigBis, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridLayout(1, 0, 10, 0));

        btnCancel.setText(org.openide.util.NbBundle.getMessage(BEDialog.class, "BEDialog.btnCancel.text")); // NOI18N
        btnCancel.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    btnCancelActionPerformed(evt);
                }
            });
        jPanel2.add(btnCancel);

        btnGo.setText((cidsBeanList == null) ? "übernehmen" : "hinzufügen");
        btnGo.setEnabled(false);
        btnGo.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    btnGoActionPerformed(evt);
                }
            });
        jPanel2.add(btnGo);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel1.add(jPanel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jPanel1, gridBagConstraints);

        bindingGroup.bind();

        pack();
    } // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void btnGoActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_btnGoActionPerformed
        go = true;
        dispose();
    }                                                                         //GEN-LAST:event_btnGoActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void btnCancelActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_btnCancelActionPerformed
        dispose();
    }                                                                             //GEN-LAST:event_btnCancelActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @param   befreiungBean  DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    private static Validator createValidatorGueltigbis(final CidsBean befreiungBean) {
        return new CidsBeanValidator(befreiungBean, "gueltig_bis") {

                @Override
                public ValidatorState performValidation() {
                    final CidsBean cidsBean = getCidsBean();
                    if (cidsBean == null) {
                        return null;
                    }
                    final Date gueltigBis = (Date)cidsBean.getProperty("gueltig_bis");

                    if (gueltigBis == null) {
                        return new ValidatorStateImpl(
                                ValidatorState.Type.ERROR,
                                "Es wurde kein gültiges Datum angegeben.");
                    } else {
                        return new ValidatorStateImpl(ValidatorState.Type.VALID);
                    }
                }
            };
    }

    /**
     * DOCUMENT ME!
     *
     * @param   befreiungBean  DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    private static Validator createValidatorAktenzeichen(final CidsBean befreiungBean) {
        return new CidsBeanValidator(befreiungBean, "aktenzeichen") {

                @Override
                public ValidatorState performValidation() {
                    final CidsBean cidsBean = getCidsBean();
                    if (cidsBean == null) {
                        return null;
                    }
                    final String aktenzeichen = (String)cidsBean.getProperty("aktenzeichen");

                    if ((aktenzeichen == null) || (aktenzeichen.length() == 0)) {
                        return new ValidatorStateImpl(
                                ValidatorState.Type.ERROR,
                                "Es wurde kein gültiges Aktenzeichen angegeben.");
                    } else {
                        return new ValidatorStateImpl(ValidatorState.Type.VALID);
                    }
                }
            };
    }

    @Override
    public CidsBean getCidsBean() {
        return cidsBean;
    }

    @Override
    public final void setCidsBean(final CidsBean cidsBean) {
        bindingGroup.unbind();
        this.cidsBean = cidsBean;
        initValidators();
        bindingGroup.bind();
    }

    @Override
    public void dispose() {
        if (go) {
            if (cidsBeanList != null) {
                cidsBeanList.add(cidsBean);
            }
        } else {
            try {
                cidsBean.setProperty("aktenzeichen", backupAktenzeichen);
                cidsBean.setProperty("gueltig_bis", backupGueltigBis);
            } catch (Exception ex) {
                // LOG.error("error setting backup properties", ex);
            }
        }
        super.dispose();
    }
}
