/*
 * Copyright (C) 2012 cismet GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package de.cismet.verdis.gui;

import Sirius.navigator.connection.SessionManager;
import com.jgoodies.looks.plastic.Plastic3DLookAndFeel;
import com.vividsolutions.jts.geom.Geometry;
import de.cismet.cids.dynamics.CidsBean;
import de.cismet.tools.gui.log4jquickconfig.Log4JQuickConfig;
import de.cismet.verdis.CidsAppBackend;
import de.cismet.verdis.constants.FortfuehrungPropertyConstants;
import de.cismet.verdis.constants.GeomPropertyConstants;
import de.cismet.verdis.search.KassenzeichenGeomSearch;
import java.awt.Cursor;
import java.awt.Frame;
import java.util.*;
import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.apache.log4j.Logger;
import org.openide.util.Exceptions;

/**
 *
 * @author jruiz
 */
public class FortfuehrungsanlaesseDialog extends javax.swing.JDialog {
    
    private static final Logger LOG = Logger.getLogger(FortfuehrungsanlaesseDialog.class);

    private static FortfuehrungsanlaesseDialog INSTANCE;
    
    private boolean lockDateButtons = false;
        
    /**
     * Creates new form FortfuehrungsanlaesseDialog
     */
    private FortfuehrungsanlaesseDialog(Frame parent, boolean modal) {
        super(parent, modal);
        
        initComponents();        

        jXTable1.setModel(new FortfuehrungenTableModel());
        
        
        jXTable1.getColumnModel().getColumn(0).setCellRenderer(jXTable1.getDefaultRenderer(String.class));
        jXTable1.getColumnModel().getColumn(1).setCellRenderer(jXTable1.getDefaultRenderer(String.class));
        jXTable1.getColumnModel().getColumn(2).setCellRenderer(jXTable1.getDefaultRenderer(String.class));

        jXTable1.getColumnModel().getColumn(0).setPreferredWidth(100);
        jXTable1.getColumnModel().getColumn(1).setPreferredWidth(150);
        jXTable1.getColumnModel().getColumn(2).setPreferredWidth(200);

        jXTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jXTable1.setDragEnabled(false);

        jXTable1.getTableHeader().setResizingAllowed(true);
        jXTable1.getTableHeader().setReorderingAllowed(false);
        //jXTable1.setSortOrder(1, SortOrder.ASCENDING);        
        
        jXTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {

        // If cell selection is enabled, both row and column change events are fired
                if (e.getSource() == jXTable1.getSelectionModel() && jXTable1.getRowSelectionAllowed()) {
                    fortfuehrungsTableListSelectionChanged(e);
                }

            }
        });
        
        jProgressBar1.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        panPeriod = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        dpiFrom = new org.jdesktop.swingx.JXDatePicker();
        dpiTo = new org.jdesktop.swingx.JXDatePicker();
        jPanel2 = new javax.swing.JPanel();
        btnThisWeek = new javax.swing.JToggleButton();
        btnLastWeek = new javax.swing.JToggleButton();
        btnThisMonth = new javax.swing.JToggleButton();
        btnLastMonth = new javax.swing.JToggleButton();
        jPanel7 = new javax.swing.JPanel();
        btnRefreshAnlaesse = new javax.swing.JButton();
        panMasterDetail = new javax.swing.JPanel();
        panMaster = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jXTable1 = new org.jdesktop.swingx.JXTable();
        panDetail = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        lblDokumentLink = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstKassenzeichen = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        btnCloseDialog = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jPanel9 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(FortfuehrungsanlaesseDialog.class, "FortfuehrungsanlaesseDialog.title")); // NOI18N
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(800, 643));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        panPeriod.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(FortfuehrungsanlaesseDialog.class, "FortfuehrungsanlaesseDialog.panPeriod.border.title"))); // NOI18N
        panPeriod.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText(org.openide.util.NbBundle.getMessage(FortfuehrungsanlaesseDialog.class, "FortfuehrungsanlaesseDialog.jLabel1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 5, 5);
        panPeriod.add(jLabel1, gridBagConstraints);

        jLabel2.setText(org.openide.util.NbBundle.getMessage(FortfuehrungsanlaesseDialog.class, "FortfuehrungsanlaesseDialog.jLabel2.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 5, 5);
        panPeriod.add(jLabel2, gridBagConstraints);

        dpiFrom.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dpiFromPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 5, 10);
        panPeriod.add(dpiFrom, gridBagConstraints);

        dpiTo.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dpiToPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 5, 10);
        panPeriod.add(dpiTo, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridLayout(2, 3, 5, 5));

        buttonGroup1.add(btnThisWeek);
        btnThisWeek.setText(org.openide.util.NbBundle.getMessage(FortfuehrungsanlaesseDialog.class, "FortfuehrungsanlaesseDialog.btnThisWeek.text")); // NOI18N
        btnThisWeek.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThisWeekActionPerformed(evt);
            }
        });
        jPanel2.add(btnThisWeek);

        buttonGroup1.add(btnLastWeek);
        btnLastWeek.setText(org.openide.util.NbBundle.getMessage(FortfuehrungsanlaesseDialog.class, "FortfuehrungsanlaesseDialog.btnLastWeek.text")); // NOI18N
        btnLastWeek.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastWeekActionPerformed(evt);
            }
        });
        jPanel2.add(btnLastWeek);

        buttonGroup1.add(btnThisMonth);
        btnThisMonth.setText(org.openide.util.NbBundle.getMessage(FortfuehrungsanlaesseDialog.class, "FortfuehrungsanlaesseDialog.btnThisMonth.text")); // NOI18N
        btnThisMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThisMonthActionPerformed(evt);
            }
        });
        jPanel2.add(btnThisMonth);

        buttonGroup1.add(btnLastMonth);
        btnLastMonth.setText(org.openide.util.NbBundle.getMessage(FortfuehrungsanlaesseDialog.class, "FortfuehrungsanlaesseDialog.btnLastMonth.text")); // NOI18N
        btnLastMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastMonthActionPerformed(evt);
            }
        });
        jPanel2.add(btnLastMonth);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panPeriod.add(jPanel2, gridBagConstraints);

        jPanel7.setPreferredSize(new java.awt.Dimension(50, 10));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 84, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weightx = 1.0;
        panPeriod.add(jPanel7, gridBagConstraints);

        btnRefreshAnlaesse.setText(org.openide.util.NbBundle.getMessage(FortfuehrungsanlaesseDialog.class, "FortfuehrungsanlaesseDialog.btnRefreshAnlaesse.text")); // NOI18N
        btnRefreshAnlaesse.setEnabled(false);
        btnRefreshAnlaesse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshAnlaesseActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 10, 10);
        panPeriod.add(btnRefreshAnlaesse, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(panPeriod, gridBagConstraints);

        panMasterDetail.setLayout(new java.awt.GridBagLayout());

        panMaster.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(FortfuehrungsanlaesseDialog.class, "FortfuehrungsanlaesseDialog.panMaster.border.title"))); // NOI18N
        panMaster.setLayout(new java.awt.GridBagLayout());

        jXTable1.setEnabled(false);
        jScrollPane1.setViewportView(jXTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 10, 10);
        panMaster.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        panMasterDetail.add(panMaster, gridBagConstraints);
        panMaster.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(FortfuehrungsanlaesseDialog.class, "FortfuehrungsanlaesseDialog.panMaster.AccessibleContext.accessibleName")); // NOI18N

        panDetail.setBorder(null);
        panDetail.setMinimumSize(new java.awt.Dimension(250, 137));
        panDetail.setPreferredSize(new java.awt.Dimension(250, 244));
        panDetail.setVerifyInputWhenFocusTarget(false);
        panDetail.setLayout(new java.awt.GridBagLayout());

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(FortfuehrungsanlaesseDialog.class, "FortfuehrungsanlaesseDialog.jPanel3.border.title"))); // NOI18N
        jPanel3.setLayout(new java.awt.GridBagLayout());

        lblDokumentLink.setText(org.openide.util.NbBundle.getMessage(FortfuehrungsanlaesseDialog.class, "FortfuehrungsanlaesseDialog.lblDokumentLink.text")); // NOI18N
        lblDokumentLink.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel3.add(lblDokumentLink, gridBagConstraints);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel3.add(jPanel5, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        panDetail.add(jPanel3, gridBagConstraints);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(FortfuehrungsanlaesseDialog.class, "FortfuehrungsanlaesseDialog.jPanel4.border.title"))); // NOI18N
        jPanel4.setLayout(new java.awt.GridBagLayout());

        lstKassenzeichen.setModel(new DefaultListModel());
        lstKassenzeichen.setEnabled(false);
        lstKassenzeichen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstKassenzeichenMouseClicked(evt);
            }
        });
        lstKassenzeichen.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstKassenzeichenValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(lstKassenzeichen);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel4.add(jScrollPane2, gridBagConstraints);

        jButton1.setText(org.openide.util.NbBundle.getMessage(FortfuehrungsanlaesseDialog.class, "FortfuehrungsanlaesseDialog.jButton1.text")); // NOI18N
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 10);
        jPanel4.add(jButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        panDetail.add(jPanel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        panMasterDetail.add(panDetail, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(panMasterDetail, gridBagConstraints);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel1.add(jPanel6, gridBagConstraints);

        jPanel8.setLayout(new java.awt.GridBagLayout());

        btnCloseDialog.setText(org.openide.util.NbBundle.getMessage(FortfuehrungsanlaesseDialog.class, "FortfuehrungsanlaesseDialog.btnCloseDialog.text")); // NOI18N
        btnCloseDialog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseDialogActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel8.add(btnCloseDialog, gridBagConstraints);

        jProgressBar1.setIndeterminate(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel8.add(jProgressBar1, gridBagConstraints);

        jPanel9.setOpaque(false);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 647, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 28, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel8.add(jPanel9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jPanel8, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jPanel1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRefreshAnlaesseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshAnlaesseActionPerformed
        refreshFortfuehrungsList();
    }//GEN-LAST:event_btnRefreshAnlaesseActionPerformed

    private void btnThisWeekActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThisWeekActionPerformed
        final Calendar calendar = Calendar.getInstance();
        
        final Date toDate = calendar.getTime();
        
        calendar.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);
        final Date fromDate = calendar.getTime();
        
        try {
            lockDateButtons = true;
            dpiFrom.setDate(fromDate);
            dpiTo.setDate(toDate);
        } finally {
            lockDateButtons = false;
        }
        
        periodChanged();
        refreshFortfuehrungsList();
    }//GEN-LAST:event_btnThisWeekActionPerformed

    private void btnLastWeekActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastWeekActionPerformed
        final Calendar calendar = Calendar.getInstance();
        
        calendar.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);
        final Date toDate = calendar.getTime();
        
        calendar.add(Calendar.DATE, -7);
        final Date fromDate = calendar.getTime();
        
        try {
            lockDateButtons = true;
            dpiFrom.setDate(fromDate);
            dpiTo.setDate(toDate);
        } finally {
            lockDateButtons = false;
        }
        
        periodChanged();
        refreshFortfuehrungsList();        
    }//GEN-LAST:event_btnLastWeekActionPerformed

    private void btnThisMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThisMonthActionPerformed
        final Calendar calendar = Calendar.getInstance();
        
        final Date toDate = calendar.getTime();
        
        calendar.set(Calendar.DAY_OF_MONTH, 1);        
        final Date fromDate = calendar.getTime();
        
        try {
            lockDateButtons = true;
            dpiFrom.setDate(fromDate);
            dpiTo.setDate(toDate);
        } finally {
            lockDateButtons = false;
        }
        
        periodChanged();
        refreshFortfuehrungsList();
    }//GEN-LAST:event_btnThisMonthActionPerformed

    private void btnLastMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastMonthActionPerformed
        final Calendar calendar = Calendar.getInstance();
        
        calendar.set(Calendar.DAY_OF_MONTH, 1);
        final Date toDate = calendar.getTime();
        
        calendar.add(Calendar.MONTH, -1);        
        final Date fromDate = calendar.getTime();
        
        try {
            lockDateButtons = true;
            dpiFrom.setDate(fromDate);
            dpiTo.setDate(toDate);
        } finally {
            lockDateButtons = false;
        }
        
        periodChanged();
        refreshFortfuehrungsList();
    }//GEN-LAST:event_btnLastMonthActionPerformed

    private void dpiFromPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dpiFromPropertyChange
        if (!lockDateButtons) {
            manualPeriodChangePerformed();
        }
    }//GEN-LAST:event_dpiFromPropertyChange

    private void dpiToPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dpiToPropertyChange
        if (!lockDateButtons) {
            manualPeriodChangePerformed();
        }
    }//GEN-LAST:event_dpiToPropertyChange

    private void btnCloseDialogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseDialogActionPerformed
        dispose();
    }//GEN-LAST:event_btnCloseDialogActionPerformed

    private void lstKassenzeichenValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstKassenzeichenValueChanged
        jButton1.setEnabled(!lstKassenzeichen.getSelectionModel().isSelectionEmpty());
    }//GEN-LAST:event_lstKassenzeichenValueChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        gotoSelectedKassenzeichen();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void lstKassenzeichenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstKassenzeichenMouseClicked
        if(evt.getClickCount() == 2) {
            if (lstKassenzeichen.getSelectedValue() != null) {
                gotoSelectedKassenzeichen();
            }
        }
    }//GEN-LAST:event_lstKassenzeichenMouseClicked

    private void gotoSelectedKassenzeichen() {
        final int kassenzeichennummer = (Integer) lstKassenzeichen.getSelectedValue();
        CidsAppBackend.getInstance().retrieveKassenzeichenByNummer(kassenzeichennummer);
    }
    
    private void setKassenzeichenNummern(Set<Integer> kassenzeichennummern) {
        final DefaultListModel kassenzeichenListModel = (DefaultListModel) lstKassenzeichen.getModel();
        kassenzeichenListModel.removeAllElements();
        
        if (kassenzeichennummern != null) {
            for (Integer kassenzeichennummer : kassenzeichennummern) {
                kassenzeichenListModel.addElement(kassenzeichennummer);            
            }
        }
        
    }
    
    private void manualPeriodChangePerformed() {
        buttonGroup1.clearSelection();
        periodChanged();
    }
    
    private void fortfuehrungsTableListSelectionChanged(ListSelectionEvent e) {        
        final int selectedIndex = jXTable1.getSelectedRow();               
        final CidsBean selectedFortfuehrungBean;
        if (selectedIndex >= 0) {
            final int rowIndex = jXTable1.convertRowIndexToModel(selectedIndex);      
            selectedFortfuehrungBean = ((FortfuehrungenTableModel) jXTable1.getModel()).getCidsBeanByIndex(rowIndex);
        } else {
            selectedFortfuehrungBean = null;
        }
        if (selectedFortfuehrungBean != null) {      
            new SwingWorker<Set<Integer>, Void>() {

                @Override
                protected Set<Integer> doInBackground() throws Exception {                
                    lstKassenzeichen.setEnabled(false);
                    jProgressBar1.setVisible(true);
                    final List<CidsBean> geomBeans = (List<CidsBean>) selectedFortfuehrungBean.getBeanCollectionProperty(FortfuehrungPropertyConstants.PROP__GEOMETRIEN);
                    final KassenzeichenGeomSearch geomSearch = new KassenzeichenGeomSearch();
                    LOG.fatal(selectedFortfuehrungBean.getProperty("geometrien").getClass());
                    final Set<Integer> kassenzeichennummern = new HashSet<Integer>();
                    for (final CidsBean geomBean : geomBeans) {
                        if (geomBean != null) {
                            try {
                                geomSearch.setGeometry((Geometry) geomBean.getProperty(GeomPropertyConstants.PROP__GEO_FIELD));
                                kassenzeichennummern.addAll((Collection<Integer>) SessionManager.getProxy().customServerSearch(SessionManager.getSession().getUser(), geomSearch));
                            } catch (final Exception ex) {
                                LOG.error("fehler beim suchen von kassenzeichen über eine geometrie", ex);
                            }
                        }
                    }
                    return kassenzeichennummern;
                }

                @Override
                protected void done() {
                    try {
                        final Set<Integer> kassenzeichennummern = get();
                        setDetailEnabled(true);
                        setKassenzeichenNummern(kassenzeichennummern);
                        
                        final CidsBean urlBean = (CidsBean) selectedFortfuehrungBean.getProperty(FortfuehrungPropertyConstants.PROP__DOKUMENTURL);
                        final String protPrefix = (String)urlBean.getProperty("url_base_id.prot_prefix");
                        final String server = (String)urlBean.getProperty("url_base_id.server");
                        final String path = (String)urlBean.getProperty("url_base_id.path");
                        final String objectName = (String)urlBean.getProperty("object_name");
                        String urlString = protPrefix + server + path + objectName;      
                        setDokumentLink(urlString);
                    } catch (final Exception ex) {
                        setKassenzeichenNummern(null);
                        LOG.fatal("", ex);
                    }
                    lstKassenzeichen.setEnabled(true);
                    jProgressBar1.setVisible(false);
                }


            }.execute();                
                        
            
        } else {
            setDetailEnabled(false);
            setKassenzeichenNummern(null);
            setDokumentLink(null);
        }        
    }
    
    private void setDokumentLink(final String dokumentUrl) {
        if (dokumentUrl != null) {
            lblDokumentLink.setText("<html><a href=\"" + dokumentUrl + "\">Dokument im Browser anzeigen</a>");
            lblDokumentLink.setToolTipText(dokumentUrl);
            lblDokumentLink.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        } else {
            lblDokumentLink.setText("");
            lblDokumentLink.setToolTipText(null);
            lblDokumentLink.setCursor(Cursor.getDefaultCursor());
        }
    }
    
    private void periodChanged() {
        final boolean anlaesseEnabled = dpiFrom.getDate() != null && dpiTo.getDate() != null;
        btnRefreshAnlaesse.setEnabled(anlaesseEnabled);
        jXTable1.setEnabled(anlaesseEnabled);
    }    
    
    private void refreshFortfuehrungsList() {
        new SwingWorker<List<CidsBean>, Void>() {

            @Override
            protected List<CidsBean> doInBackground() throws Exception {
                btnRefreshAnlaesse.setEnabled(false);
                jProgressBar1.setVisible(true);
                jXTable1.setEnabled(false);
                final CidsAppBackend be = CidsAppBackend.getInstance();
                
                return be.loadFortfuehrungBeansByDates(dpiFrom.getDate(), dpiTo.getDate());
            }

            @Override
            protected void done() {
                List<CidsBean> cidsBeans = null;
                try {
                    cidsBeans = get();
                    
                    jXTable1.getSelectionModel().clearSelection();
                    ((CidsBeanTableModel) jXTable1.getModel()).setCidsBeans(cidsBeans);
                } catch (Exception ex) {
                    LOG.error("error while loading fortfuehrung beans", ex);
                }
                btnRefreshAnlaesse.setEnabled(true);
                jXTable1.setEnabled(true);
                jProgressBar1.setVisible(false);
                
                if (cidsBeans == null || cidsBeans.isEmpty()) {
                    JOptionPane.showMessageDialog(rootPane, "<html>Es konnten keine Fortführungsfälle<br/>für den gewählten Zeitraum gefunden werden.", "keine Fortführungsfälle gefunden", JOptionPane.INFORMATION_MESSAGE);
                }
            }                                    
        }.execute();        
    }
    
    private void setDetailEnabled(final boolean enabled) {
        lstKassenzeichen.setEnabled(enabled);
        lblDokumentLink.setEnabled(enabled);
    }
    
    public static FortfuehrungsanlaesseDialog getInstance() {
        if (INSTANCE == null) {
            INSTANCE = new FortfuehrungsanlaesseDialog(Main.getCurrentInstance(), false);
            INSTANCE.setLocationRelativeTo(Main.getCurrentInstance());
        }
        return INSTANCE;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                try {
                    javax.swing.UIManager.setLookAndFeel(new Plastic3DLookAndFeel());
                    Log4JQuickConfig.configure4LumbermillOnLocalhost();                    
                } catch (UnsupportedLookAndFeelException ex) {
                    Exceptions.printStackTrace(ex);
                }
                
                FortfuehrungsanlaesseDialog dialog = new FortfuehrungsanlaesseDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCloseDialog;
    private javax.swing.JToggleButton btnLastMonth;
    private javax.swing.JToggleButton btnLastWeek;
    private javax.swing.JButton btnRefreshAnlaesse;
    private javax.swing.JToggleButton btnThisMonth;
    private javax.swing.JToggleButton btnThisWeek;
    private javax.swing.ButtonGroup buttonGroup1;
    private org.jdesktop.swingx.JXDatePicker dpiFrom;
    private org.jdesktop.swingx.JXDatePicker dpiTo;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private org.jdesktop.swingx.JXTable jXTable1;
    private javax.swing.JLabel lblDokumentLink;
    private javax.swing.JList lstKassenzeichen;
    private javax.swing.JPanel panDetail;
    private javax.swing.JPanel panMaster;
    private javax.swing.JPanel panMasterDetail;
    private javax.swing.JPanel panPeriod;
    // End of variables declaration//GEN-END:variables

}
