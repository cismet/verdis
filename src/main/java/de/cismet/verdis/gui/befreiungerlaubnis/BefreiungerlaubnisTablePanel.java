/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.verdis.gui.befreiungerlaubnis;

import java.awt.event.ActionEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import java.util.ArrayList;
import java.util.List;

import javax.swing.AbstractAction;
import javax.swing.JDialog;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import de.cismet.cids.dynamics.CidsBean;

import de.cismet.tools.gui.StaticSwingTools;

import de.cismet.verdis.CidsAppBackend;

import de.cismet.verdis.commons.constants.VerdisConstants;

import de.cismet.verdis.gui.AbstractCidsBeanTable;
import de.cismet.verdis.gui.AbstractCidsBeanTablePanel;

/**
 * DOCUMENT ME!
 *
 * @author   jruiz
 * @version  $Revision$, $Date$
 */
public class BefreiungerlaubnisTablePanel extends AbstractCidsBeanTablePanel {

    //~ Static fields/initializers ---------------------------------------------

    private static final org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(
            BefreiungerlaubnisTablePanel.class);

    //~ Instance fields --------------------------------------------------------

    private boolean editmode = false;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private de.cismet.verdis.gui.befreiungerlaubnis.BefreiungerlaubnisTable befreiungerlaubnisTable1;
    private javax.swing.JButton cmdAddBefreiungerlaubnis;
    private javax.swing.JButton cmdDeleteBefreiungerlaubnis;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBE;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form RegenflaechenTabellenPanel.
     */
    public BefreiungerlaubnisTablePanel() {
        initComponents();

        befreiungerlaubnisTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

                @Override
                public void valueChanged(final ListSelectionEvent e) {
                    updateButtons();
                }
            });
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        befreiungerlaubnisTable1 = new de.cismet.verdis.gui.befreiungerlaubnis.BefreiungerlaubnisTable();
        cmdAddBefreiungerlaubnis = new javax.swing.JButton();
        cmdDeleteBefreiungerlaubnis = new javax.swing.JButton();
        lblBE = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        befreiungerlaubnisTable1.addMouseListener(new java.awt.event.MouseAdapter() {

                @Override
                public void mouseClicked(final java.awt.event.MouseEvent evt) {
                    befreiungerlaubnisTable1MouseClicked(evt);
                }
            });
        jScrollPane1.setViewportView(befreiungerlaubnisTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        add(jScrollPane1, gridBagConstraints);

        cmdAddBefreiungerlaubnis.setIcon(new javax.swing.ImageIcon(
                getClass().getResource("/de/cismet/verdis/res/images/titlebars/add.png"))); // NOI18N
        cmdAddBefreiungerlaubnis.setFocusPainted(false);
        cmdAddBefreiungerlaubnis.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    cmdAddBefreiungerlaubnisActionPerformed(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        add(cmdAddBefreiungerlaubnis, gridBagConstraints);

        cmdDeleteBefreiungerlaubnis.setAction(new DeleteAction());
        cmdDeleteBefreiungerlaubnis.setIcon(new javax.swing.ImageIcon(
                getClass().getResource("/de/cismet/verdis/res/images/titlebars/remove.png"))); // NOI18N
        cmdDeleteBefreiungerlaubnis.setEnabled(false);
        cmdDeleteBefreiungerlaubnis.setFocusPainted(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(cmdDeleteBefreiungerlaubnis, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(
            lblBE,
            org.openide.util.NbBundle.getMessage(
                BefreiungerlaubnisTablePanel.class,
                "BefreiungerlaubnisTablePanel.lblBE.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        add(lblBE, gridBagConstraints);
    }                                                        // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void befreiungerlaubnisTable1MouseClicked(final java.awt.event.MouseEvent evt) { //GEN-FIRST:event_befreiungerlaubnisTable1MouseClicked
        if (isEditmode() && (evt.getClickCount() == 2)) {
            if (!getTable().getSelectedBeans().isEmpty()) {
                final CidsBean cidsBean = getTable().getSelectedBeans().iterator().next();

                final JDialog dialog = new NewBefreiungerlaubnisDialog(StaticSwingTools.getParentFrame(this), cidsBean);
                dialog.addWindowListener(new WindowAdapter() {

                        @Override
                        public void windowClosed(final WindowEvent e) {
                            ((BefreiungerlaubnisTableModel)getTable().getModel()).fireTableDataChanged();
                        }
                    });
                StaticSwingTools.showDialog(dialog);
            }
        }
    } //GEN-LAST:event_befreiungerlaubnisTable1MouseClicked

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void cmdAddBefreiungerlaubnisActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_cmdAddBefreiungerlaubnisActionPerformed
        try {
            final List<CidsBean> list = getTable().getCidsBean()
                        .getBeanCollectionProperty(
                            VerdisConstants.MC.KANALANSCHLUSS
                            + "."
                            + VerdisConstants.PROP.KANALANSCHLUSS.BEFREIUNGENUNDERLAUBNISSE);

            final CidsBean newBefreiungBean = CidsBean.createNewCidsBeanFromTableName(CidsAppBackend.getInstance()
                            .getDomain(),
                    VerdisConstants.MC.BEFREIUNGERLAUBNIS);

            final JDialog dialog = new NewBefreiungerlaubnisDialog(StaticSwingTools.getParentFrame(this),
                    newBefreiungBean,
                    list);
            dialog.addWindowListener(new WindowAdapter() {

                    @Override
                    public void windowClosed(final WindowEvent e) {
                        ((BefreiungerlaubnisTableModel)getTable().getModel()).fireTableDataChanged();
                    }
                });
            StaticSwingTools.showDialog(dialog);
        } catch (Exception e) {
            LOG.error("Fehler beim Hinzuf√ºgen einer neuen Befreiung", e);
        }
    } //GEN-LAST:event_cmdAddBefreiungerlaubnisActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    public boolean isEditmode() {
        return editmode;
    }

    /**
     * DOCUMENT ME!
     *
     * @param  editable  DOCUMENT ME!
     */
    public void setEditable(final boolean editable) {
        editmode = editable;
        updateButtons();
    }

    /**
     * DOCUMENT ME!
     */
    private void updateButtons() {
        // deletebutton aktualisieren
        final boolean isSelectionEmpty = getTable().getSelectionModel().isSelectionEmpty();
        cmdDeleteBefreiungerlaubnis.setEnabled(isEditmode() && !isSelectionEmpty);
        cmdAddBefreiungerlaubnis.setEnabled(isEditmode());
    }

    @Override
    public AbstractCidsBeanTable getTable() {
        return befreiungerlaubnisTable1;
    }

    /**
     * DOCUMENT ME!
     */
    private void deleteSelectedBE() {
        if (LOG.isDebugEnabled()) {
            LOG.debug("deleteBE()");
        }

        // nur um Editmodus reagieren
        if (isEditmode()) {
            final List<CidsBean> selectedBefreiungen = getSelectedBE();
            for (final CidsBean selectedBefreiung : selectedBefreiungen) {
                try {
                    if (LOG.isDebugEnabled()) {
                        LOG.debug("selectedBefreiung: " + selectedBefreiung);
                    }
                    getTable().removeBean(selectedBefreiung);
                } catch (Exception ex) {
                    LOG.error("Fehler beim L√∂schen einer Befreiung", ex);
                }
            }
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    private List<CidsBean> getSelectedBE() {
        return new ArrayList<CidsBean>(getTable().getSelectedBeans());
    }

    //~ Inner Classes ----------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    class DeleteAction extends AbstractAction {

        //~ Methods ------------------------------------------------------------

        /**
         * DOCUMENT ME!
         *
         * @param  e  DOCUMENT ME!
         */
        @Override
        public void actionPerformed(final ActionEvent e) {
            deleteSelectedBE();
        }
    }
}
