/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.cismet.verdis.gui.aenderungsanfrage;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;

import java.util.Date;
import java.util.List;

import de.cismet.cids.dynamics.CidsBean;
import de.cismet.cids.dynamics.CidsBeanStore;

import de.cismet.verdis.CidsAppBackend;
import de.cismet.verdis.EditModeListener;

import de.cismet.verdis.server.json.aenderungsanfrage.AenderungsanfrageJson;
import de.cismet.verdis.server.json.aenderungsanfrage.NachrichtJson;

/**
 * DOCUMENT ME!
 *
 * @author   jruiz
 * @version  $Revision$, $Date$
 */
public class AenderungsanfrageNachrichtenPanel extends javax.swing.JPanel implements CidsBeanStore, EditModeListener {

    //~ Instance fields --------------------------------------------------------

    private List<NachrichtJson> nachrichtJsons;
    private String username;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.Box.Filler filler1;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates a new AenderungsanfrageNachrichtenPanel object.
     */
    public AenderungsanfrageNachrichtenPanel() {
        this(null, "Testnutzer");
    }

    /**
     * Creates new form AenderungsanfrageDiskussionPanel.
     *
     * @param  nachrichtJsons  DOCUMENT ME!
     * @param  username        DOCUMENT ME!
     */
    public AenderungsanfrageNachrichtenPanel(final List<NachrichtJson> nachrichtJsons, final String username) {
        this.nachrichtJsons = nachrichtJsons;
        this.username = username;

        initComponents();

        refresh();

        jScrollPane1.addComponentListener(new ComponentAdapter() {

                @Override
                public void componentResized(final ComponentEvent e) {
                    final Dimension d = new Dimension(jScrollPane1.getWidth() - 20, jPanel1.getHeight());
                    jPanel1.setPreferredSize(d);
                }
            });

        addComponentListener(new ComponentAdapter() {

                @Override
                public void componentResized(final ComponentEvent e) {
                    for (final Component comp : jPanel1.getComponents()) {
                        if (comp instanceof AenderungsanfrageNachrichtPanel) {
                            ((AenderungsanfrageNachrichtPanel)comp).resize(jPanel1);
                        }
                    }
                }
            });
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @param  username  DOCUMENT ME!
     */
    public void setUsername(final String username) {
        this.username = username;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0),
                new java.awt.Dimension(0, 0),
                new java.awt.Dimension(0, 32767));
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(filler1, gridBagConstraints);

        jScrollPane1.setViewportView(jPanel1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jScrollPane1, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jScrollPane2.setMinimumSize(new java.awt.Dimension(19, 82));

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setMinimumSize(new java.awt.Dimension(220, 80));
        jScrollPane2.setViewportView(jTextArea1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(jScrollPane2, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(
            jButton1,
            org.openide.util.NbBundle.getMessage(
                AenderungsanfrageNachrichtenPanel.class,
                "AenderungsanfrageNachrichtenPanel.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    jButton1ActionPerformed(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel2.add(jButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(jPanel2, gridBagConstraints);
    } // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void jButton1ActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_jButton1ActionPerformed
        if ((jTextArea1.getText() != null) && !jTextArea1.getText().trim().isEmpty()) {
            final NachrichtJson nachrichtJson = new NachrichtJson.Sachberarbeiter(
                    true,
                    new Date(),
                    jTextArea1.getText().trim(),
                    username);
            nachrichtJsons.add(nachrichtJson);
            addNachricht(nachrichtJson);
            jTextArea1.setText("");
            refresh();
        }
    }                                                                            //GEN-LAST:event_jButton1ActionPerformed

    /**
     * DOCUMENT ME!
     */
    public final void refresh() {
        if (nachrichtJsons != null) {
            clear();
            for (final NachrichtJson nachrichtJson : nachrichtJsons) {
                if (!(NachrichtJson.Typ.CITIZEN.equals(nachrichtJson.getTyp())
                                && Boolean.TRUE.equals(nachrichtJson.getDraft()))) {
                    addNachricht(nachrichtJson);
                }
            }
        }
        revalidate();
        repaint();
    }

    /**
     * DOCUMENT ME!
     *
     * @param  nachrichtJsons  DOCUMENT ME!
     */
    public void setNachrichten(final List<NachrichtJson> nachrichtJsons) {
        this.nachrichtJsons = nachrichtJsons;
        refresh();
    }

    /**
     * DOCUMENT ME!
     *
     * @param  nachrichtJson  DOCUMENT ME!
     */
    private void addNachricht(final NachrichtJson nachrichtJson) {
        final AenderungsanfrageNachrichtPanel aenderungsanfrageNachrichtPanel = new AenderungsanfrageNachrichtPanel(
                nachrichtJson);

        final java.awt.GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 20, 20);
        jPanel1.add(aenderungsanfrageNachrichtPanel, gridBagConstraints);
    }

    /**
     * DOCUMENT ME!
     */
    private void clear() {
        jPanel1.removeAll();
        final java.awt.GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(new javax.swing.Box.Filler(
                new java.awt.Dimension(0, 0),
                new java.awt.Dimension(0, 0),
                new java.awt.Dimension(0, 32767)),
            gridBagConstraints);
    }

    @Override
    public CidsBean getCidsBean() {
        return null;
    }

    @Override
    public void setCidsBean(final CidsBean cb) {
        final AenderungsanfrageJson anfrageJson = AenderungsanfrageHandler.getInstance().getAenderungsanfrageJson();
        setNachrichten((anfrageJson != null) ? anfrageJson.getNachrichten() : null);
    }

    @Override
    public void editModeChanged() {
        setEnabled(CidsAppBackend.getInstance().isEditable()
                    && (AenderungsanfrageHandler.getInstance().getAenderungsanfrageBean() != null));
    }

    @Override
    public void setEnabled(final boolean enabled) {
        super.setEnabled(enabled);
        jPanel2.setVisible(enabled);
        refresh();
    }
}
