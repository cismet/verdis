/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * LagisCrossoverPanel.java
 *
 * Created on 03.09.2009, 09:44:54
 */
package de.cismet.verdis.gui;

import de.cismet.lagisEE.entity.core.FlurstueckSchluessel;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Set;
import javax.swing.JDialog;
import javax.swing.table.AbstractTableModel;
import org.apache.commons.httpclient.NameValuePair;
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.log4j.Logger;
import org.jdesktop.swingx.JXTable;
import org.openide.util.Exceptions;

/**
 *
 * @author spuhl
 */
public class LagisCrossoverPanel extends javax.swing.JPanel implements MouseListener {

    //ToDo defaults für Panel ? 
    private static final Logger log = org.apache.log4j.Logger.getLogger(LagisCrossoverPanel.class);
    private final FlurstueckTableModel tableModel = new FlurstueckTableModel();
    private int lagisCrossoverPort = -1;
    private static final String server = "http://localhost:";
    private static final String request = "/lagis/loadFlurstueck?";
    //ToDo perhaps place in LagisCrossover
    //Problem: would be the the only dependency to LagisClient
    //http://localhost:19000/lagis/loadFlurstueck?gemarkung=Barmen&flur=1&zaehler=100&nenner=0
    public static final NameValuePair PARAMETER_GEMARKUNG = new NameValuePair("gemarkung", "");
    public static final NameValuePair PARAMETER_FLUR = new NameValuePair("flur", "");
    public static final NameValuePair PARAMETER_FLURSTUECK_ZAEHLER = new NameValuePair("zaehler", "");
    public static final NameValuePair PARAMETER_FLURSTUECK_NENNER = new NameValuePair("nenner", "");

    /** Creates new form LagisCrossoverPanel */
    public LagisCrossoverPanel(final int lagisCrossoverPort) {
        initComponents();
        tblFlurstuecke.setModel(tableModel);
        tblFlurstuecke.addMouseListener(this);
        this.lagisCrossoverPort = lagisCrossoverPort;
    }

    LagisCrossoverPanel(final int lagisCrossoverPort, final Set<FlurstueckSchluessel> flurstueckSchluessel) {
        this(lagisCrossoverPort);
        tableModel.updateTableModel(flurstueckSchluessel);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblFlurstuecke = new JXTable();
        btnClose = new javax.swing.JButton();

        tblFlurstuecke.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblFlurstuecke);

        btnClose.setText(org.openide.util.NbBundle.getMessage(LagisCrossoverPanel.class, "LagisCrossoverPanel.btnClose.text")); // NOI18N
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                        .addGap(13, 13, 13))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnClose)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClose)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        closeDialog();
    }//GEN-LAST:event_btnCloseActionPerformed

    //ToDo ugly
    private void closeDialog() {
        ((JDialog) getParent().getParent().getParent().getParent()).dispose();
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        log.debug("Crossover: mouse clicked");
        final Object source = e.getSource();
        if (source instanceof JXTable) {
            if (e.getClickCount() > 1) {
                final int selectedRow = tblFlurstuecke.getSelectedRow();
                if (selectedRow != -1) {
                    final int modelIndex = ((JXTable) tblFlurstuecke).convertRowIndexToModel(selectedRow);
                    if (modelIndex != -1) {
                        final FlurstueckSchluessel key = tableModel.getFlurstueckSchluesselAtIndex(modelIndex);
                        if (key != null) {
                            openFlurstueckInLagis(key);
                        } else {
                            log.warn("Crossover: Kein FlurstueckSchluessel zu angebenen Index.");
                        }
                    } else {
                        log.warn("Crossover: Kein ModelIndex zu angebenen ViewIndex.");
                    }
                } else {
                    log.debug("Crossover: Keine Tabellen zeile selektiert.");
                }
            } else {
                log.debug("Crossover: Kein Multiclick");
            }
        } else {
            log.debug("Crossover: Mouselistner nicht für JXTable");
        }
    }

    //ToDo place query generation in LagisCrossover. Give key get Query.
    private void openFlurstueckInLagis(FlurstueckSchluessel key) {
        try {
            if (key != null) {
                if (lagisCrossoverPort < 0 || lagisCrossoverPort > 65535) {
                    log.warn("Crossover: lagisCrossoverPort ist ungültig: " + lagisCrossoverPort);
                } else {
                    //ToDo Thread
                    URL lagisQuery = createQuery(lagisCrossoverPort, key);
                    if (lagisQuery != null) {
                        lagisQuery.openStream();
                    } else {
                        log.warn("Crossover: konnte keine Query anlegen. Kein Abruf der Flurstücke möglich.");
                    }
                }
            } else {
                log.warn("Crossover: Kann angebenes Flurstück nicht öffnwen");
            }
        } catch (IOException ex) {
            log.error("Crossover: Fehler beim öffnen des Flurstücks in LagIS.",ex);
        }

    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

    @Override
    public void mousePressed(MouseEvent e) {
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblFlurstuecke;
    // End of variables declaration//GEN-END:variables

    public class FlurstueckTableModel extends AbstractTableModel {

        private final String[] COLUMN_HEADER = {"Flurstück"};
        private final ArrayList<FlurstueckSchluessel> data = new ArrayList<FlurstueckSchluessel>();

        @Override
        public int getColumnCount() {
            return 1;
        }

        @Override
        public int getRowCount() {
            return data.size();
        }

        @Override
        public Object getValueAt(final int rowIndex, final int columnIndex) {
            final FlurstueckSchluessel value = data.get(rowIndex);
            switch (columnIndex) {
                case 0:
                    return value.getKeyString();
                default:
                    return "Spalte ist nicht definiert";
            }
        }

        public void updateTableModel(Set newData) {
            data.clear();
            if (newData != null) {
                data.addAll(newData);
            }
        }

        public FlurstueckSchluessel getFlurstueckSchluesselAtIndex(final int index) {
            return data.get(index);
        }

        @Override
        public String getColumnName(int column) {
            return COLUMN_HEADER[column];
        }
    }

    public static URL createQuery(final int port, final FlurstueckSchluessel key) {
        if (port < 0 || port > 65535) {
            log.warn("Crossover: lagisCrossoverPort ist ungültig: " + port);
        } else {
            try {
                //ToDo ugly because is static
                PARAMETER_GEMARKUNG.setValue(key.getGemarkung().getBezeichnung());
                PARAMETER_FLUR.setValue(key.getFlur().toString());
                PARAMETER_FLURSTUECK_ZAEHLER.setValue(key.getFlurstueckZaehler().toString());
                if (key.getFlurstueckNenner() != null) {
                    PARAMETER_FLURSTUECK_NENNER.setValue(key.getFlurstueckNenner().toString());
                } else {
                    PARAMETER_FLURSTUECK_NENNER.setValue("0");
                }
                final GetMethod tmp = new GetMethod(server + port + request);
                tmp.setQueryString(new NameValuePair[]{PARAMETER_GEMARKUNG, PARAMETER_FLUR, PARAMETER_FLURSTUECK_ZAEHLER, PARAMETER_FLURSTUECK_NENNER});
                log.debug("Crossover: lagisCrossOverQuery: " + tmp.getURI().toString());
                return new URL(tmp.getURI().toString());
                //WebAccessManager.getInstance(lagisCrossoverQuery.toString());
                } catch (Exception ex) {
                log.error("Crossover: Fehler beim fernsteuern von LagIS.", ex);
            }
        }
        return null;
    }
}
