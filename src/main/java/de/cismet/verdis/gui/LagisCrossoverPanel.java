/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * LagisCrossoverPanel.java
 *
 * Created on 03.09.2009, 09:44:54
 */
package de.cismet.verdis.gui;

import com.vividsolutions.jts.geom.Geometry;
import de.cismet.lagisEE.bean.LagisServerRemote;
import de.cismet.lagisEE.crossover.LagisCrossoverRemote;
import de.cismet.lagisEE.crossover.entity.WfsFlurstuecke;
import de.cismet.lagisEE.entity.core.FlurstueckSchluessel;
import de.cismet.layout.FadingCardLayout;
import entity.KassenzeichenEntity;
import java.awt.BorderLayout;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.swing.JDialog;
import javax.swing.SwingWorker;
import javax.swing.table.AbstractTableModel;
import org.apache.commons.httpclient.NameValuePair;
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.log4j.Logger;
import org.jdesktop.swingx.JXTable;

/**
 *
 * @author spuhl
 */
public class LagisCrossoverPanel extends javax.swing.JPanel implements MouseListener {

    //ToDo defaults für Panel ? 
    private static final Logger log = org.apache.log4j.Logger.getLogger(LagisCrossoverPanel.class);
    private final FlurstueckTableModel tableModel = new FlurstueckTableModel();
    private int lagisCrossoverPort = -1;
    private static final String server = "http://localhost:";
    private static final String request = "/lagis/loadFlurstueck?";
    //ToDo perhaps place in LagisCrossover
    //Problem: would be the the only dependency to LagisClient
    //http://localhost:19000/lagis/loadFlurstueck?gemarkung=Barmen&flur=1&zaehler=100&nenner=0
    public static final NameValuePair PARAMETER_GEMARKUNG = new NameValuePair("gemarkung", "");
    public static final NameValuePair PARAMETER_FLUR = new NameValuePair("flur", "");
    public static final NameValuePair PARAMETER_FLURSTUECK_ZAEHLER = new NameValuePair("zaehler", "");
    public static final NameValuePair PARAMETER_FLURSTUECK_NENNER = new NameValuePair("nenner", "");
    private final Main mainApp;
    private final ExecutorService execService = Executors.newCachedThreadPool();;

    private FadingCardLayout layout = new FadingCardLayout();
    private static final String PROGRESS_CARD_NAME="progress";
    private static final String CONTENT_CARD_NAME="content";
    private static final String MESSAGE_CARD_NAME="message";
    
    /** Creates new form LagisCrossoverPanel */
    public LagisCrossoverPanel(final int lagisCrossoverPort,Main verdisMain) {
        initComponents();
        panAll.setLayout(layout);
        panAll.removeAll();
        panAll.add(panContentProgress, PROGRESS_CARD_NAME);
        panAll.add(panContent, CONTENT_CARD_NAME);
        panAll.add(panContentMessage, MESSAGE_CARD_NAME);
        tblFlurstuecke.setModel(tableModel);
        tblFlurstuecke.addMouseListener(this);
        this.lagisCrossoverPort = lagisCrossoverPort;
        mainApp = verdisMain;
        pgbProgress.setIndeterminate(true);
        layout.show(panAll, PROGRESS_CARD_NAME);
    }

    public void startSearch() {
        try {
            execService.execute(new FlurstueckRetriever());
        } catch (Exception ex) {
            log.error("Fehler während dem suchen der Flurstücke: ", ex);
            //ToDo Nachricht an benutzer
        }
    }
    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panControl = new javax.swing.JPanel();
        btnClose = new javax.swing.JButton();
        panAll = new javax.swing.JPanel();
        panContentProgress = new javax.swing.JPanel();
        pgbProgress = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        panContentMessage = new javax.swing.JPanel();
        lblMessage = new javax.swing.JLabel();
        panContent = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFlurstuecke = new JXTable();

        panControl.setMinimumSize(new java.awt.Dimension(50, 50));
        panControl.setPreferredSize(new java.awt.Dimension(500, 200));

        btnClose.setText(org.openide.util.NbBundle.getMessage(LagisCrossoverPanel.class, "LagisCrossoverPanel.btnClose.text")); // NOI18N
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panControlLayout = new javax.swing.GroupLayout(panControl);
        panControl.setLayout(panControlLayout);
        panControlLayout.setHorizontalGroup(
            panControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panControlLayout.createSequentialGroup()
                .addContainerGap(406, Short.MAX_VALUE)
                .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panControlLayout.setVerticalGroup(
            panControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panControlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnClose)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panAll.setLayout(new java.awt.CardLayout());

        panContentProgress.setPreferredSize(new java.awt.Dimension(250, 140));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/cismet/verdis/res/searching.png"))); // NOI18N

        jLabel2.setText(org.openide.util.NbBundle.getMessage(LagisCrossoverPanel.class, "LagisCrossoverPanel.jLabel2.text")); // NOI18N

        javax.swing.GroupLayout panContentProgressLayout = new javax.swing.GroupLayout(panContentProgress);
        panContentProgress.setLayout(panContentProgressLayout);
        panContentProgressLayout.setHorizontalGroup(
            panContentProgressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panContentProgressLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panContentProgressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pgbProgress, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)
                    .addComponent(jLabel2))
                .addContainerGap())
        );
        panContentProgressLayout.setVerticalGroup(
            panContentProgressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panContentProgressLayout.createSequentialGroup()
                .addContainerGap(51, Short.MAX_VALUE)
                .addGroup(panContentProgressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panContentProgressLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pgbProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        panAll.add(panContentProgress, "card3");

        panContentMessage.setPreferredSize(new java.awt.Dimension(250, 140));

        lblMessage.setText(org.openide.util.NbBundle.getMessage(LagisCrossoverPanel.class, "LagisCrossoverPanel.lblMessage.text")); // NOI18N

        javax.swing.GroupLayout panContentMessageLayout = new javax.swing.GroupLayout(panContentMessage);
        panContentMessage.setLayout(panContentMessageLayout);
        panContentMessageLayout.setHorizontalGroup(
            panContentMessageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panContentMessageLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblMessage, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE)
                .addContainerGap())
        );
        panContentMessageLayout.setVerticalGroup(
            panContentMessageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panContentMessageLayout.createSequentialGroup()
                .addContainerGap(59, Short.MAX_VALUE)
                .addComponent(lblMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        panAll.add(panContentMessage, "card2");

        tblFlurstuecke.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblFlurstuecke);

        javax.swing.GroupLayout panContentLayout = new javax.swing.GroupLayout(panContent);
        panContent.setLayout(panContentLayout);
        panContentLayout.setHorizontalGroup(
            panContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panContentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE)
                .addContainerGap())
        );
        panContentLayout.setVerticalGroup(
            panContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panContentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                .addContainerGap())
        );

        panAll.add(panContent, "card4");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panAll, javax.swing.GroupLayout.DEFAULT_SIZE, 498, Short.MAX_VALUE)
            .addComponent(panControl, javax.swing.GroupLayout.DEFAULT_SIZE, 498, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panAll, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panControl, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        closeDialog();
}//GEN-LAST:event_btnCloseActionPerformed

    //ToDo ugly
    private void closeDialog() {
        ((JDialog) getParent().getParent().getParent().getParent()).dispose();
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        log.debug("Crossover: mouse clicked");
        final Object source = e.getSource();
        if (source instanceof JXTable) {
            if (e.getClickCount() > 1) {
                final int selectedRow = tblFlurstuecke.getSelectedRow();
                if (selectedRow != -1) {
                    final int modelIndex = ((JXTable) tblFlurstuecke).convertRowIndexToModel(selectedRow);
                    if (modelIndex != -1) {
                        final FlurstueckSchluessel key = tableModel.getFlurstueckSchluesselAtIndex(modelIndex);
                        if (key != null) {
                            openFlurstueckInLagis(key);
                        } else {
                            log.warn("Crossover: Kein FlurstueckSchluessel zu angebenen Index.");
                        }
                    } else {
                        log.warn("Crossover: Kein ModelIndex zu angebenen ViewIndex.");
                    }
                } else {
                    log.debug("Crossover: Keine Tabellen zeile selektiert.");
                }
            } else {
                log.debug("Crossover: Kein Multiclick");
            }
        } else {
            log.debug("Crossover: Mouselistner nicht für JXTable");
        }
    }

    //ToDo place query generation in LagisCrossover. Give key get Query.
    //ToDo maybe thread ?? 
    private void openFlurstueckInLagis(FlurstueckSchluessel key) {
        try {
            if (key != null) {
                if (lagisCrossoverPort < 0 || lagisCrossoverPort > 65535) {
                    log.warn("Crossover: lagisCrossoverPort ist ungültig: " + lagisCrossoverPort);
                } else {
                    //ToDo Thread
                    URL lagisQuery = createQuery(lagisCrossoverPort, key);
                    if (lagisQuery != null) {
                        lagisQuery.openStream();
                    } else {
                        log.warn("Crossover: konnte keine Query anlegen. Kein Abruf der Flurstücke möglich.");
                    }
                }
            } else {
                log.warn("Crossover: Kann angebenes Flurstück nicht öffnwen");
            }
        } catch (IOException ex) {
            log.error("Crossover: Fehler beim öffnen des Flurstücks in LagIS.",ex);
        }

    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

    @Override
    public void mousePressed(MouseEvent e) {
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JPanel panAll;
    private javax.swing.JPanel panContent;
    private javax.swing.JPanel panContentMessage;
    private javax.swing.JPanel panContentProgress;
    private javax.swing.JPanel panControl;
    private javax.swing.JProgressBar pgbProgress;
    private javax.swing.JTable tblFlurstuecke;
    // End of variables declaration//GEN-END:variables

    public class FlurstueckTableModel extends AbstractTableModel {

        private final String[] COLUMN_HEADER = {"Flurstücke"};
        private final ArrayList<FlurstueckSchluessel> data = new ArrayList<FlurstueckSchluessel>();

        @Override
        public int getColumnCount() {
            return 1;
        }

        @Override
        public int getRowCount() {
            return data.size();
        }

        @Override
        public Object getValueAt(final int rowIndex, final int columnIndex) {
            final FlurstueckSchluessel value = data.get(rowIndex);
            switch (columnIndex) {
                case 0:
                    return value.getKeyString();
                default:
                    return "Spalte ist nicht definiert";
            }
        }

        public void updateTableModel(Set newData) {
            data.clear();
            if (newData != null) {
                data.addAll(newData);
            }
        }

        public FlurstueckSchluessel getFlurstueckSchluesselAtIndex(final int index) {
            return data.get(index);
        }

        @Override
        public String getColumnName(int column) {
            return COLUMN_HEADER[column];
        }
    }

    public static URL createQuery(final int port, final FlurstueckSchluessel key) {
        if (port < 0 || port > 65535) {
            log.warn("Crossover: lagisCrossoverPort ist ungültig: " + port);
        } else {
            try {
                //ToDo ugly because is static
                PARAMETER_GEMARKUNG.setValue(key.getGemarkung().getBezeichnung());
                PARAMETER_FLUR.setValue(key.getFlur().toString());
                PARAMETER_FLURSTUECK_ZAEHLER.setValue(key.getFlurstueckZaehler().toString());
                if (key.getFlurstueckNenner() != null) {
                    PARAMETER_FLURSTUECK_NENNER.setValue(key.getFlurstueckNenner().toString());
                } else {
                    PARAMETER_FLURSTUECK_NENNER.setValue("0");
                }
                final GetMethod tmp = new GetMethod(server + port + request);
                tmp.setQueryString(new NameValuePair[]{PARAMETER_GEMARKUNG, PARAMETER_FLUR, PARAMETER_FLURSTUECK_ZAEHLER, PARAMETER_FLURSTUECK_NENNER});
                log.debug("Crossover: lagisCrossOverQuery: " + tmp.getURI().toString());
                return new URL(tmp.getURI().toString());
                //WebAccessManager.getInstance(lagisCrossoverQuery.toString());
                } catch (Exception ex) {
                log.error("Crossover: Fehler beim fernsteuern von LagIS.", ex);
            }
        }
        return null;
    }

     class FlurstueckRetriever extends SwingWorker<Set<FlurstueckSchluessel>, Void> {

        @Override
        protected Set<FlurstueckSchluessel> doInBackground() throws Exception {
             final String currentKZ = mainApp.getKzPanel().getShownKassenzeichen();
            if (currentKZ != null && currentKZ.length() > 0) {                
                final Geometry kassenzeichenGeom = mainApp.getFlPanel().getFlOverviewPanel().getModel().getSingleKassenzeichenGeometry();
                if (kassenzeichenGeom != null) {
                    log.info("Crossover: Geometrie zum bestimmen der Flurstücke: " + kassenzeichenGeom);
                    final LagisCrossoverRemote lagisCrossover = mainApp.getPrefs().getLagisCrossoverAccessor();
                    final LagisServerRemote lagisServer = mainApp.getPrefs().getLagisServerAccessor();
                    if (lagisCrossover != null && lagisServer != null) {
                        log.debug("buffer: "+mainApp.getPrefs().getFlurstueckBuffer());
                        final Set<WfsFlurstuecke> wfsFlurstuecke = lagisCrossover.getIntersectingFlurstuecke(kassenzeichenGeom,mainApp.getPrefs().getFlurstueckBuffer());
                        if (wfsFlurstuecke != null && wfsFlurstuecke.size() > 0) {
                            log.debug("Crossover: Anzahl WFS Flurstücke: " + wfsFlurstuecke.size());
                            final Set<FlurstueckSchluessel> flurstueckSchluessel = lagisServer.getFlurstueckSchluesselForWFSFlurstueck(wfsFlurstuecke);
                            if (flurstueckSchluessel != null && flurstueckSchluessel.size() > 0) {
                                log.debug("Crossover: Anzahl Flurstück Schlüssel: " + flurstueckSchluessel.size());
                                if (flurstueckSchluessel.size() != wfsFlurstuecke.size()) {
                                    log.warn("Crossover: Achtung Anzahl WFS/Schlüssel sind unterschiedlich");
                                }
                                 } else {
                                log.info("Crossover: Keine geschnittenen Flurstücke gefunden(Schlüssel).");
                                if (wfsFlurstuecke.size() != 0) {
                                    log.warn("Crossover: Achtung Anzahl WFS/Schlüssel sind unterschiedlich");
                                }
                            }
                            return flurstueckSchluessel;
                        } else {
                            log.info("Crossover: Keine geschnittenen Flurstücke gefunden(WFS).");
                            //ToDo Meldung an benutzer
                        }
                    } else {
                        lblMessage.setText("<html>Die Verbindung zum LagIS Server<br/>ist nicht richtig konfiguriert.</html>");
                        log.warn("Crossover: Kann die Flurstücke nicht bestimmen, weil die Verbindung zum server nicht richtig konfiguriert ist.");
                        log.warn("Crossover: lagisCrossover=" + lagisCrossover);
                        log.warn("Crossover: lagisServer=" + lagisServer);
                    }
                } else {
                    //ToDo user message !
                    lblMessage.setText("<html>Keine Kassenzeichengeometrie vorhanden,<br/>bestimmen der Flurstücke nicht möglich.</html>");
                    log.warn("Crossover: Keine Geometrie vorhanden zum bestimmen der Flurstücke");
                }
            } else {
                //ToDo user message !
                lblMessage.setText("<html>Bitte wählen Sie ein Kassenzeichen aus,<br/>damit Flurstücke bestimmt werden können.</html>");
                log.warn("Crossover: Kein Kassenzeichen ausgewählt kann Lagis Flurstück nicht bestimmen");
            }            
            return null;
        }

        @Override
        protected void done() {
            log.debug("FlurstueckRetriever done.");
            super.done();
            if (isCancelled()) {
                log.debug("FlurstueckRetriever canceled. Nothing to do");
            }
            try {
                Set<FlurstueckSchluessel> results = get();
                if (results == null) {
                    results = new HashSet<FlurstueckSchluessel>();
                    tableModel.updateTableModel(results);
                    layout.show(panAll, MESSAGE_CARD_NAME);
                } else {
                    tableModel.updateTableModel(results);
                    layout.show(panAll, CONTENT_CARD_NAME);
                }
            } catch (Exception ex) {
                log.error("Fehler beim verarbeiten der Ergebnisse: ", ex);
                tableModel.updateTableModel(new HashSet<KassenzeichenEntity>());                
                lblMessage.setText("<html>Fehler beim abfragen<br/>der Flurstücke.</html>");
                layout.show(panAll, MESSAGE_CARD_NAME);
            }
//            LagisCrossoverPanel.this.revalidate();
//            LagisCrossoverPanel.this.repaint();
//            ((JDialog) getParent().getParent().getParent().getParent()).repaint();
        }
    }
}
