/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
/*
 *  Copyright (C) 2010 thorsten
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/*
 * AllgemeineInfos.java
 *
 * Created on 04.12.2010, 10:33:57
 */
package de.cismet.verdis.gui;

import com.vividsolutions.jts.geom.Geometry;

import edu.umd.cs.piccolox.event.PNotification;

import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Paint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JList;
import javax.swing.JOptionPane;

import de.cismet.cids.dynamics.CidsBean;
import de.cismet.cids.dynamics.CidsBeanStore;

import de.cismet.cismap.commons.features.Feature;
import de.cismet.cismap.commons.features.FeatureCollectionEvent;
import de.cismet.cismap.commons.features.FeatureCollectionListener;
import de.cismet.cismap.commons.features.PureNewFeature;
import de.cismet.cismap.commons.gui.piccolo.PFeature;
import de.cismet.cismap.commons.gui.piccolo.eventlistener.AttachFeatureListener;

import de.cismet.cismap.navigatorplugin.CidsFeature;

import de.cismet.verdis.CidsAppBackend;
import de.cismet.verdis.EditModeListener;

import de.cismet.verdis.commons.constants.VerdisConstants;

/**
 * DOCUMENT ME!
 *
 * @version  $Revision$, $Date$
 */
public class FlurstueckePanel extends javax.swing.JPanel implements CidsBeanStore,
    EditModeListener,
    FeatureCollectionListener {

    //~ Static fields/initializers ---------------------------------------------

    private static final transient org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(
            FlurstueckePanel.class);
    private static final Color[] COLORS = new Color[] {
            new Color(41, 86, 178),
            new Color(101, 156, 239),
            new Color(125, 189, 0),
            new Color(220, 246, 0),
            new Color(255, 91, 0)
        };
    public static final List<Color> LANDPARCEL_COLORS = Collections.unmodifiableList(Arrays.asList(COLORS));
    private static int NEW_FLURSTUECK_GEOM_ID = -1;

    //~ Instance fields --------------------------------------------------------

    private CidsBean kassenzeichenBean;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form AllgemeineInfos.
     */
    public FlurstueckePanel() {
        initComponents();
        jList1.setCellRenderer(new FancyListCellRenderer());
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        jList1.setBackground(new java.awt.Color(242, 241, 240));

        final org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create(
                "${cidsBean.flurstuecke}");
        final org.jdesktop.swingbinding.JListBinding jListBinding = org.jdesktop.swingbinding.SwingBindings
                    .createJListBinding(
                        org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                        this,
                        eLProperty,
                        jList1,
                        "");
        bindingGroup.addBinding(jListBinding);

        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {

                @Override
                public void valueChanged(final javax.swing.event.ListSelectionEvent evt) {
                    jList1ValueChanged(evt);
                }
            });
        jScrollPane1.setViewportView(jList1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(jScrollPane1, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel2.setLayout(new java.awt.GridLayout(1, 0, 4, 0));

        jButton1.setText(org.openide.util.NbBundle.getMessage(
                FlurstueckePanel.class,
                "FlurstueckePanel.jButton1.text")); // NOI18N
        jPanel2.add(jButton1);

        jButton2.setText(org.openide.util.NbBundle.getMessage(
                FlurstueckePanel.class,
                "FlurstueckePanel.jButton2.text")); // NOI18N
        jPanel2.add(jButton2);

        jPanel1.add(jPanel2, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(jPanel1, gridBagConstraints);

        bindingGroup.bind();
    } // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void jList1ValueChanged(final javax.swing.event.ListSelectionEvent evt) { //GEN-FIRST:event_jList1ValueChanged
        try {
            final Collection<Feature> features = new ArrayList<Feature>();
            final int[] selection = jList1.getSelectedIndices();
            for (int index = 0; index < selection.length; ++index) {
                final Object ob = jList1.getModel().getElementAt(selection[index]);
                if (ob instanceof CidsBean) {
                    final CidsBean flurstueckGeomBean = (CidsBean)ob;
                    final CidsFeature cidsFeature = new CidsFeature(flurstueckGeomBean.getMetaObject());
                    features.add(cidsFeature);
                }
            }

            CidsAppBackend.getInstance().getMainMap().getFeatureCollection().removeFeatureCollectionListener(this);
            CidsAppBackend.getInstance().getMainMap().getFeatureCollection().select(features);
            CidsAppBackend.getInstance().getMainMap().getFeatureCollection().addFeatureCollectionListener(this);
        } catch (Exception ex) {
            LOG.error(ex, ex);
        }
    } //GEN-LAST:event_jList1ValueChanged

    @Override
    public CidsBean getCidsBean() {
        return kassenzeichenBean;
    }

    @Override
    public void setCidsBean(final CidsBean cidsBean) {
        bindingGroup.unbind();
        kassenzeichenBean = cidsBean;
        bindingGroup.bind();
    }

    @Override
    public void editModeChanged() {
        setEnabled(CidsAppBackend.getInstance().isEditable());
    }

    @Override
    public void setEnabled(final boolean bln) {
        super.setEnabled(bln);
        jButton1.setEnabled(bln);
        jButton2.setEnabled(bln);
    }

    @Override
    public void featuresAdded(final FeatureCollectionEvent fce) {
    }

    @Override
    public void allFeaturesRemoved(final FeatureCollectionEvent fce) {
    }

    @Override
    public void featuresRemoved(final FeatureCollectionEvent fce) {
        if (getCidsBean() != null) {
            final Collection<CidsBean> flurstueckBeans = getCidsBean().getBeanCollectionProperty("flurstuecke");
            final Collection<Feature> removedFeatures = fce.getEventFeatures();
            for (final Feature feature : removedFeatures) {
                if (feature instanceof CidsFeature) {
                    final CidsFeature cidsFeature = (CidsFeature)feature;
                    final CidsBean toRemoveBean = cidsFeature.getMetaObject().getBean();
                    flurstueckBeans.remove(toRemoveBean);
                }
            }
        }
    }

    @Override
    public void featuresChanged(final FeatureCollectionEvent fce) {
    }

    @Override
    public void featureSelectionChanged(final FeatureCollectionEvent fce) {
        final List<CidsBean> flurstueckBeans = getCidsBean().getBeanCollectionProperty("flurstuecke");
        final Collection<Feature> features = fce.getEventFeatures();
        if (features != null) {
            final int[] indices = new int[features.size()];

            final int i = 0;
            for (final Feature feature : features) {
                final int index = flurstueckBeans.indexOf(((CidsFeature)feature).getMetaObject().getBean());
                indices[i] = index;
            }

            jList1.setSelectedIndices(indices);
        } else {
            jList1.setSelectedIndex(-1);
        }
    }

    @Override
    public void featureReconsiderationRequested(final FeatureCollectionEvent fce) {
    }

    @Override
    public void featureCollectionChanged() {
    }

    /**
     * DOCUMENT ME!
     *
     * @param  notification  DOCUMENT ME!
     */
    public void attachFeatureRequested(final PNotification notification) {
        final Object o = notification.getObject();
        if (o instanceof AttachFeatureListener) {
            final AttachFeatureListener afl = (AttachFeatureListener)o;
            final PFeature pf = afl.getFeatureToAttach();
            if ((pf.getFeature() instanceof PureNewFeature)) {
                try {
                    final Geometry geom = pf.getFeature().getGeometry();

                    final CidsBean geomBean = CidsBean.createNewCidsBeanFromTableName(
                            VerdisConstants.DOMAIN,
                            "geom");
                    geomBean.setProperty("geo_field", geom);

                    final CidsBean flurstueckGeomBean = CidsBean.createNewCidsBeanFromTableName(
                            VerdisConstants.DOMAIN,
                            "flurstuecke");
                    flurstueckGeomBean.setProperty("istfrei", true);
                    flurstueckGeomBean.setProperty("geom", geomBean);
                    flurstueckGeomBean.setProperty("text", "freie Geometrie");

                    final CidsFeature cidsFeature = new CidsFeature(
                            flurstueckGeomBean.getMetaObject());
                    cidsFeature.getMetaObject().setID(getNewFlurstueckGeomId());
                    cidsFeature.setEditable(CidsAppBackend.getInstance().isEditable());
                    CidsAppBackend.getInstance().getMainMap().getFeatureCollection().removeFeature(pf.getFeature());
                    CidsAppBackend.getInstance().getMainMap().getFeatureCollection().addFeature(cidsFeature);

                    getCidsBean().getBeanCollectionProperty("flurstuecke").add(flurstueckGeomBean);
                } catch (Exception ex) {
                    LOG.error("error while attaching feature", ex);
                }
            } else if (pf.getFeature() instanceof CidsFeature) {
                JOptionPane.showMessageDialog(
                    Main.getMappingComponent(),
                    "Es k\u00F6nnen nur nicht bereits zugeordnete Fl\u00E4chen zugeordnet werden.");
            }
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    public static int getNewFlurstueckGeomId() {
        return NEW_FLURSTUECK_GEOM_ID--;
    }

    //~ Inner Classes ----------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private static final class FancyListCellRenderer extends DefaultListCellRenderer {

        //~ Static fields/initializers -----------------------------------------

        private static final int SPACING = 5;
        private static final int MARKER_WIDTH = 4;

        //~ Instance fields ----------------------------------------------------

        private boolean selected = false;

        //~ Constructors -------------------------------------------------------

        /**
         * Creates a new FancyListCellRenderer object.
         */
        public FancyListCellRenderer() {
            setOpaque(false);
        }

        //~ Methods ------------------------------------------------------------

        /**
         * DOCUMENT ME!
         *
         * @param   list          DOCUMENT ME!
         * @param   value         DOCUMENT ME!
         * @param   index         DOCUMENT ME!
         * @param   isSelected    DOCUMENT ME!
         * @param   cellHasFocus  DOCUMENT ME!
         *
         * @return  DOCUMENT ME!
         */
        @Override
        public Component getListCellRendererComponent(final JList list,
                final Object value,
                final int index,
                final boolean isSelected,
                final boolean cellHasFocus) {
            final CidsBean bean = (CidsBean)value;
            final Component comp = super.getListCellRendererComponent(
                    list,
                    bean.getProperty("text"),
                    index,
                    isSelected,
                    cellHasFocus);
            selected = isSelected;
            int colorIndex = bean.getMetaObject().getId();
            if (colorIndex < 0) {
                colorIndex = -colorIndex;
            }
            colorIndex %= FlurstueckePanel.LANDPARCEL_COLORS.size();

            setBackground(LANDPARCEL_COLORS.get(colorIndex));
            setBorder(BorderFactory.createEmptyBorder(1, (2 * SPACING) + MARKER_WIDTH, 1, 0));
            return comp;
        }

        /**
         * DOCUMENT ME!
         *
         * @param  g  DOCUMENT ME!
         */
        @Override
        protected void paintComponent(final Graphics g) {
            final Graphics2D g2d = (Graphics2D)g;
            final Paint backup = g2d.getPaint();
            if (selected) {
                g2d.setColor(javax.swing.UIManager.getDefaults().getColor("List.selectionBackground"));
                g2d.fillRect(0, 0, getWidth(), getHeight());
            }
            g2d.setColor(getBackground());
            g2d.fillRect(SPACING, 0, MARKER_WIDTH, getHeight());
            g2d.setPaint(backup);
            super.paintComponent(g);
        }
    }
}
