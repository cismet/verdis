/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.cismet.cids.custom.report;

import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.util.JRLoader;

import org.apache.log4j.Logger;

import org.jdesktop.swingx.JXErrorPane;
import org.jdesktop.swingx.error.ErrorInfo;

import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Observer;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;

import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.Timer;

import de.cismet.cids.dynamics.CidsBean;

import de.cismet.cids.utils.jasperreports.ReportHelper;
import de.cismet.cids.utils.jasperreports.ReportSwingWorkerDialog;

import de.cismet.cismap.commons.gui.printing.JasperDownload;

import de.cismet.tools.BrowserLauncher;

import de.cismet.tools.gui.StaticSwingTools;
import de.cismet.tools.gui.downloadmanager.AbstractDownload;
import de.cismet.tools.gui.downloadmanager.ByteArrayDownload;
import de.cismet.tools.gui.downloadmanager.Download;
import de.cismet.tools.gui.downloadmanager.Download.State;
import de.cismet.tools.gui.downloadmanager.DownloadManager;
import de.cismet.tools.gui.downloadmanager.DownloadManagerDialog;

/**
 * DOCUMENT ME!
 *
 * @author   daniel
 * @version  $Revision$, $Date$
 */
public class FEPGeneratorDialog extends javax.swing.JDialog {

    //~ Static fields/initializers ---------------------------------------------

    private static final Logger LOG = Logger.getLogger(FEPGeneratorDialog.class);

    //~ Instance fields --------------------------------------------------------

    private CidsBean kassenzeichen;
    private Frame parent;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btnGroupFormat;
    private javax.swing.ButtonGroup btnGroupOrientation;
    private javax.swing.JButton btnPrint;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblFiller;
    private javax.swing.JLabel lblFiller2;
    private javax.swing.JLabel lblFiller3;
    private javax.swing.JLabel lblFormat;
    private javax.swing.JLabel lblHinweise;
    private javax.swing.JLabel lblOrientation;
    private javax.swing.JPanel pnlFormat;
    private javax.swing.JPanel pnlOrientation;
    private javax.swing.JRadioButton rbA3;
    private javax.swing.JRadioButton rbA4;
    private javax.swing.JRadioButton rbLandscapeMode;
    private javax.swing.JRadioButton rbPortraitMode;
    private javax.swing.JTextArea taHinweise;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates a new FEPGeneratorDialog object.
     *
     * @param  kassenzeichen  DOCUMENT ME!
     * @param  parent         DOCUMENT ME!
     */
    public FEPGeneratorDialog(final CidsBean kassenzeichen, final Frame parent) {
        super(parent, false);
        this.kassenzeichen = kassenzeichen;
        this.parent = parent;
        initComponents();
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * Creates new form FEPGeneratorDialog.
     */
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        btnGroupFormat = new javax.swing.ButtonGroup();
        btnGroupOrientation = new javax.swing.ButtonGroup();
        lblHinweise = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taHinweise = new javax.swing.JTextArea();
        lblFormat = new javax.swing.JLabel();
        lblOrientation = new javax.swing.JLabel();
        lblFiller = new javax.swing.JLabel();
        pnlFormat = new javax.swing.JPanel();
        rbA4 = new javax.swing.JRadioButton();
        rbA3 = new javax.swing.JRadioButton();
        lblFiller2 = new javax.swing.JLabel();
        pnlOrientation = new javax.swing.JPanel();
        rbPortraitMode = new javax.swing.JRadioButton();
        rbLandscapeMode = new javax.swing.JRadioButton();
        lblFiller3 = new javax.swing.JLabel();
        btnPrint = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(FEPGeneratorDialog.class, "FEPGeneratorDialog.title")); // NOI18N
        setMinimumSize(new java.awt.Dimension(311, 250));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(
            lblHinweise,
            org.openide.util.NbBundle.getMessage(FEPGeneratorDialog.class, "FEPGeneratorDialog.lblHinweise.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);
        getContentPane().add(lblHinweise, gridBagConstraints);

        jScrollPane1.setMinimumSize(new java.awt.Dimension(26, 50));

        taHinweise.setColumns(20);
        taHinweise.setRows(5);
        jScrollPane1.setViewportView(taHinweise);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jScrollPane1, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(
            lblFormat,
            org.openide.util.NbBundle.getMessage(FEPGeneratorDialog.class, "FEPGeneratorDialog.lblFormat.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 0);
        getContentPane().add(lblFormat, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(
            lblOrientation,
            org.openide.util.NbBundle.getMessage(FEPGeneratorDialog.class, "FEPGeneratorDialog.lblOrientation.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 0);
        getContentPane().add(lblOrientation, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(
            lblFiller,
            org.openide.util.NbBundle.getMessage(FEPGeneratorDialog.class, "FEPGeneratorDialog.lblFiller.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(lblFiller, gridBagConstraints);

        pnlFormat.setLayout(new java.awt.GridBagLayout());

        btnGroupFormat.add(rbA4);
        rbA4.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(
            rbA4,
            org.openide.util.NbBundle.getMessage(FEPGeneratorDialog.class, "FEPGeneratorDialog.rbA4.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        pnlFormat.add(rbA4, gridBagConstraints);

        btnGroupFormat.add(rbA3);
        org.openide.awt.Mnemonics.setLocalizedText(
            rbA3,
            org.openide.util.NbBundle.getMessage(FEPGeneratorDialog.class, "FEPGeneratorDialog.rbA3.text")); // NOI18N
        rbA3.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    rbA3ActionPerformed(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        pnlFormat.add(rbA3, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(
            lblFiller2,
            org.openide.util.NbBundle.getMessage(FEPGeneratorDialog.class, "FEPGeneratorDialog.lblFiller2.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        pnlFormat.add(lblFiller2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 10);
        getContentPane().add(pnlFormat, gridBagConstraints);

        pnlOrientation.setLayout(new java.awt.GridBagLayout());

        btnGroupOrientation.add(rbPortraitMode);
        rbPortraitMode.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(
            rbPortraitMode,
            org.openide.util.NbBundle.getMessage(FEPGeneratorDialog.class, "FEPGeneratorDialog.rbPortraitMode.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        pnlOrientation.add(rbPortraitMode, gridBagConstraints);

        btnGroupOrientation.add(rbLandscapeMode);
        org.openide.awt.Mnemonics.setLocalizedText(
            rbLandscapeMode,
            org.openide.util.NbBundle.getMessage(FEPGeneratorDialog.class, "FEPGeneratorDialog.rbLandscapeMode.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        pnlOrientation.add(rbLandscapeMode, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(
            lblFiller3,
            org.openide.util.NbBundle.getMessage(FEPGeneratorDialog.class, "FEPGeneratorDialog.lblFiller3.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        pnlOrientation.add(lblFiller3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 10);
        getContentPane().add(pnlOrientation, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(
            btnPrint,
            org.openide.util.NbBundle.getMessage(FEPGeneratorDialog.class, "FEPGeneratorDialog.btnPrint.text")); // NOI18N
        btnPrint.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    btnPrintActionPerformed(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        getContentPane().add(btnPrint, gridBagConstraints);
    } // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void rbA3ActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_rbA3ActionPerformed
    }                                                                        //GEN-LAST:event_rbA3ActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void btnPrintActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_btnPrintActionPerformed
        final List<CidsBean> beans = new LinkedList<CidsBean>();
        beans.add(kassenzeichen);
//        FebReportGenerator.generateFEBReport(beans, hints, parent);
        generateReport(taHinweise.getText());
        this.setVisible(false);
    }                                                                            //GEN-LAST:event_btnPrintActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @param  hints  DOCUMENT ME!
     */
    private void generateReport(final String hints) {
        LOG.fatal("starting report generation for feb report");

        final SwingWorker<Boolean, Object> worker = new SwingWorker<Boolean, Object>() {

                private final ReportSwingWorkerDialog dialog = new ReportSwingWorkerDialog((Frame)parent, true);
                private boolean forceQuit = false;

                @Override
                protected Boolean doInBackground() throws Exception {
                    SwingUtilities.invokeLater(new Runnable() {

                            @Override
                            public void run() {
                                LOG.fatal("show report generation dialog");
                                StaticSwingTools.showDialog(dialog);
                            }
                        });
                    LOG.fatal("generating report beans");
                    final Collection<FebReportBean> reportBeans = new LinkedList<FebReportBean>();
                    reportBeans.add(new FebReportBean(kassenzeichen, hints));
                    boolean ready = false;

//                final Timer timer = new Timer(10000, new ActionListener() {
//                    @Override
//                    public void actionPerformed(final ActionEvent e) {
//                        forceQuit = true;
//                    }
//                });
                    do {
                        ready = true;
                        for (final FebReportBean rb : reportBeans) {
                            if (!rb.isReadyToProceed() || forceQuit) {
                                ready = false;
                                break;
                            }
                        }
                    } while (!ready);
                    LOG.fatal("ready to procced");
                    final JRBeanCollectionDataSource dataSource = new JRBeanCollectionDataSource(reportBeans);
                    final HashMap parameters = new HashMap();

                    final ArrayList<String> reports = new ArrayList<String>();
                    reports.add("/de/cismet/cids/custom/report/feb_map.jasper");
                    reports.add("/de/cismet/cids/custom/report/feb.jasper");

                    FileOutputStream fos = null;
                    final List<InputStream> ins = new ArrayList<InputStream>();
                    for (final String report : reports) {
                        final JasperReport jasperReport = (JasperReport)JRLoader.loadObject(FEPGeneratorDialog.class
                                        .getResourceAsStream(report));

                        // print aus report und daten erzeugen
                        final JasperPrint jasperPrint = JasperFillManager.fillReport(
                                jasperReport,
                                parameters,
                                dataSource);
                        final ByteArrayOutputStream outTmp = new ByteArrayOutputStream();
                        JasperExportManager.exportReportToPdfStream(jasperPrint, outTmp);
                        ins.add(new ByteArrayInputStream(outTmp.toByteArray()));
                        outTmp.close();
                    }
                    final ByteArrayOutputStream out = new ByteArrayOutputStream();
                    ReportHelper.concatPDFs(ins, out, true);
                    // zusammengefügten pdfStream in Datei schreiben
                    final File file = new File("", "report.pdf");
                    file.getParentFile().mkdirs();
                    fos = new FileOutputStream(file);
                    fos.write(out.toByteArray());

                    if (DownloadManagerDialog.showAskingForUserTitle(parent)) {
                        final String jobname = DownloadManagerDialog.getJobname();

                        DownloadManager.instance()
                                .add(new ByteArrayDownload(out.toByteArray(), "", jobname, "feb_report", ".pdf"));
                    }
                    BrowserLauncher.openURL("file:///" + file);

                    LOG.fatal("starting download job");
                    return true;
                }

                @Override
                protected void done() {
                    boolean error = false;
                    try {
                        error = !get();
                    } catch (InterruptedException ex) {
                        // unterbrochen, nichts tun
                    } catch (ExecutionException ex) {
                        error = true;
                        LOG.error("error while generating report", ex);
                    }
                    dialog.setVisible(false);
                    if (error) {
                        final ErrorInfo ei = new ErrorInfo(
                                "foo", // NOI18N
                                "bar", // NOI18N
                                null,
                                null,
                                null,
                                Level.ALL,
                                null);
                        JXErrorPane.showDialog(parent, ei);
                    }
                }
            };
        worker.execute();
    }
}
